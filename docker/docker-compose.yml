x-logging: &default-logging
  driver: 'json-file'
  options:
    max-size: "50m"
    max-file: 6

x-base: &base
  profiles: [app]
  image: opscale/nova
  build:
    context: ../
    dockerfile: ./docker/Swoole.Alpine.Dockerfile
    args:
      APP_ENV: 'production'
      APP_HOST: '${APP_HOST}'
      WWWUSER: ${HOST_UID:-1000}
      WWWGROUP: ${HOST_GID:-1000}
  env_file:
    - ./.env
  volumes:
    - '../storage/app/public:/var/www/html/storage/app/public'
    - '../storage/logs:/var/www/html/storage/logs'
  user: "${HOST_UID:-1000}:${HOST_GID:-1000}"
  security_opt:
    - no-new-privileges:true
  ulimits:
    nofile:
      soft: 20000
      hard: 40000
  networks:
    - stack
  logging: *default-logging
  restart: always
  depends_on:
    pgsql:
      condition: service_healthy
    redis:
      condition: service_healthy
    minio:
      condition: service_healthy

services:
  nginx:
    profiles: [app]
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - stack
    logging: *default-logging
    restart: always
    depends_on:
      - app

  app:
    <<: *base
    ports:
      - "127.0.0.1:8000:8000"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "localhost:8000/up" ]
      interval: 3s
      retries: 12
      timeout: 5s

  horizon:
    <<: *base
    environment:
      CONTAINER_MODE: horizon
    restart: unless-stopped

  scheduler:
    <<: *base
    environment:
      CONTAINER_MODE: scheduler
    restart: unless-stopped

  # reverb:
  #   <<: *base
  #   environment:
  #     CONTAINER_MODE: reverb
  #   expose:
  #     - "8080"

  # TODO: https://github.com/supabase/supabase/tree/master/docker
  pgsql:
    profiles: [app]
    image: 'postgres:17-bookworm'
    environment:
      POSTGRES_DB: '${DB_DATABASE}'
      POSTGRES_USER: '${DB_USERNAME}'
      POSTGRES_PASSWORD: '${DB_PASSWORD}'
    volumes:
      - 'stack-pgsql:/var/lib/postgresql/data'
      - './database:/docker-entrypoint-initdb.d'
      - '../backup:/backup'
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 20000
        hard: 40000
    networks:
      - stack
    logging: *default-logging
    restart: always
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', '${DB_USERNAME}', '-h', 'localhost' ]
      interval: 5s
      timeout: 5s
      retries: 10
    labels:
      docker-volume-backup.stop-during-backup: true
      docker-volume-backup.archive-pre: /bin/sh -c 'pg_dump -U ${DB_USERNAME} -F t ${DB_DATABASE} > /backup/${DB_DATABASE}-database.tar'

  redis:
    profiles: [app]
    image: 'redis:alpine'
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}", "--maxmemory", "2gb" ]
    volumes:
      - 'stack-redis:/data'
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 20000
        hard: 40000
    networks:
      - stack
    logging: *default-logging
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      retries: 3
      timeout: 5s

  minio:
    profiles: [app]
    image: 'minio/minio:latest'
    environment:
      MINIO_ROOT_USER: '${MINIO_ROOT_USER}'
      MINIO_ROOT_PASSWORD: '${MINIO_ROOT_PASSWORD}'
    command: 'minio server /data/minio --console-address ":8900"'
    volumes:
      - 'stack-minio:/data/minio'
    security_opt:
      - no-new-privileges:true
    networks:
      - stack
    ports:
      - "127.0.0.1:8900:8900"
    logging: *default-logging
    restart: always
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      retries: 3
      timeout: 5s

  typesense:
    profiles: [app]
    image: 'typesense/typesense:0.25.2'
    environment:
      TYPESENSE_DATA_DIR: '${TYPESENSE_DATA_DIR:-/typesense-data}'
      TYPESENSE_API_KEY: '${TYPESENSE_API_KEY}'
      TYPESENSE_ENABLE_CORS: '${TYPESENSE_ENABLE_CORS:-true}'
    volumes:
      - 'stack-typesense:/typesense-data'
    security_opt:
      - no-new-privileges:true
    networks:
      - stack
    logging: *default-logging
    restart: always
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--spider", "http://localhost:8108/health" ]
      interval: 3s
      retries: 12
      timeout: 5s

  pgadmin:
    profiles: [administration]
    image: 'dpage/pgadmin4:latest'
    environment:
      PGADMIN_DEFAULT_EMAIL: '${PGADMIN_DEFAULT_EMAIL}'
      PGADMIN_DEFAULT_PASSWORD: '${PGADMIN_DEFAULT_PASSWORD}'
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'True'
    volumes:
      - 'stack-pgadmin:/var/lib/pgadmin'
    ports:
      - 5050:80
    security_opt:
      - no-new-privileges:true
    networks:
      - stack
    logging: *default-logging
    restart: on-failure
    depends_on:
      pgsql:
        condition: service_healthy

  backup:
    profiles: [administration]
    image: offen/docker-volume-backup:v2
    environment:
      BACKUP_FILENAME: backup-%Y-%m-%dT%H-%M-%S.tar.gz
      BACKUP_PRUNING_PREFIX: backup-
      BACKUP_CRON_EXPRESSION: "0 2 * * *"
      BACKUP_RETENTION_DAYS: '7'
    volumes:
      - stack-pgsql:/backup/pgsql:ro
      - ../backup/volumes:/archive
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    security_opt:
      - no-new-privileges:true
    networks:
      - stack
    logging: *default-logging
    restart: on-failure:5
    depends_on:
      pgsql:
        condition: service_healthy

networks:
  stack:
    driver: bridge

volumes:
  stack-pgsql:
    driver: local
  stack-redis:
    driver: local
  stack-minio:
    driver: local
  stack-typesense:
    driver: local
  stack-pgadmin:
    driver: local